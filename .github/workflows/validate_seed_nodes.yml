name: Validate Seed Nodes Configuration

on:
  push:
    branches: ["master", "main"]
    paths:
      - "seed-nodes.json"
      - "utils/seed_nodes_schema.json"
      - "utils/validate_seed_nodes.py"
  pull_request:
    branches: ["master", "main"]
    paths:
      - "seed-nodes.json"
      - "utils/seed_nodes_schema.json"
      - "utils/validate_seed_nodes.py"
  schedule:
    # Run every 2 hours at minute 0 (00:00, 06:00, 12:00, 18:00 UTC)
    - cron: "0 */2 * * *"
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-22.04
    name: Validate Seed Nodes Configuration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r utils/requirements.txt

      - name: Check seed nodes file exists
        run: |
          if [ ! -f "seed-nodes.json" ]; then
            echo "‚ùå seed-nodes.json file not found!"
            exit 1
          fi
          echo "‚úì seed-nodes.json file exists"

      - name: Check schema file exists
        run: |
          if [ ! -f "utils/seed_nodes_schema.json" ]; then
            echo "‚ùå utils/seed_nodes_schema.json file not found!"
            exit 1
          fi
          echo "‚úì utils/seed_nodes_schema.json file exists"

      - name: Validate seed nodes JSON schema and WSS connectivity
        run: |
          echo "Validating seed-nodes.json against schema and testing WSS connectivity..."
          echo "Note: WSS connectivity tests run for nodes with 'wss': true"

          # Capture script output and exit code
          set +e  # Don't exit on error so we can capture the output
          python3 utils/validate_seed_nodes.py 2>&1 | tee validation_output.txt
          SCRIPT_EXIT_CODE=${PIPESTATUS[0]}
          set -e  # Re-enable exit on error

          # Store the output for later steps
          echo "VALIDATION_OUTPUT<<EOF" >> $GITHUB_ENV
          cat validation_output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Store exit code
          echo "SCRIPT_EXIT_CODE=$SCRIPT_EXIT_CODE" >> $GITHUB_ENV

          # Exit with the original script exit code
          exit $SCRIPT_EXIT_CODE

      - name: Validation Summary
        run: |
          echo "üéâ All seed nodes validation checks passed!"
          echo "‚úì Schema validation successful"
          echo "‚úì All seed nodes are properly formatted"
          echo "‚úì Host addresses are valid (domains/IPs)"
          echo "‚úì Host types are correctly classified (domain/ipv4/ipv6)"
          echo "‚úì netids are valid (1-14428 range)"
          echo "‚úì Contact information is properly structured"
          echo "‚úì WSS connectivity verified for all WSS-enabled seed nodes"

      - name: Send Discord Success Notification
        if: success() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ -z "$WEBHOOK_URL" ]; then
            echo "Warning: DISCORD_WEBHOOK_URL secret not set, skipping Discord notification"
            exit 0
          fi

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Extract key metrics from validation output
          TOTAL_NODES=$(echo "$VALIDATION_OUTPUT" | grep -oP "Found \K\d+" | head -1 || echo "N/A")
          WSS_SUMMARY=$(echo "$VALIDATION_OUTPUT" | grep "WSS Connectivity Summary:" | grep -oP "\d+/\d+" | head -1 || echo "N/A")
          TCP_SUMMARY=$(echo "$VALIDATION_OUTPUT" | grep "TCP Connectivity Summary:" | grep -oP "\d+/\d+" | head -1 || echo "N/A")

          # Create summary
          SUMMARY="**‚úÖ All validations passed successfully!**
          üìä **Metrics:** ${TOTAL_NODES} seed nodes found
          üîó **TCP Connectivity:** ${TCP_SUMMARY} nodes reachable
          üîê **WSS Connectivity:** ${WSS_SUMMARY} WSS-enabled nodes reachable"

          # Prepare detailed output for spoiler (limit to ~3000 chars to stay under Discord limits)
          VALIDATION_OUTPUT_TRUNCATED=$(echo "$VALIDATION_OUTPUT" | head -c 3000)
          if [ ${#VALIDATION_OUTPUT} -gt 3000 ]; then
            VALIDATION_OUTPUT_TRUNCATED="${VALIDATION_OUTPUT_TRUNCATED}... (output truncated)"
          fi

          # Format with spoiler tags for detailed output
          DETAILED_OUTPUT="||**Detailed Validation Output:**
          \`\`\`
          $VALIDATION_OUTPUT_TRUNCATED
          \`\`\`||"

          FULL_DESCRIPTION="$SUMMARY

          $DETAILED_OUTPUT"

          # Create Discord embed payload using jq
          jq -n \
            --arg title "‚úÖ Seed Nodes Validation Successful" \
            --arg description "$FULL_DESCRIPTION" \
            --arg repo "${{ github.repository }}" \
            --arg commit_short "$COMMIT_SHORT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg repo_url "$REPO_URL" \
            --arg run_url "$RUN_URL" \
            --arg timestamp "$TIMESTAMP" \
            '{
              embeds: [{
                title: $title,
                description: $description,
                color: 3066993,
                fields: [
                  {
                    name: "Repository",
                    value: "[\($repo)](\($repo_url))",
                    inline: true
                  },
                  {
                    name: "Commit",
                    value: "[\($commit_short)](\($repo_url)/commit/\($commit_sha))",
                    inline: true
                  },
                  {
                    name: "Workflow Run",
                    value: "[View Details](\($run_url))",
                    inline: true
                  }
                ],
                timestamp: $timestamp,
                footer: {
                  text: "Komodo Platform Seed Nodes Monitor"
                }
              }]
            }' | curl -H "Content-Type: application/json" \
                      -X POST \
                      -d @- \
                      "$WEBHOOK_URL"

      - name: Send Discord Failure Notification
        if: failure() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ -z "$WEBHOOK_URL" ]; then
            echo "Warning: DISCORD_WEBHOOK_URL secret not set, skipping Discord notification"
            exit 0
          fi

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Extract key metrics and errors from validation output
          TOTAL_NODES=$(echo "$VALIDATION_OUTPUT" | grep -oP "Found \K\d+" | head -1 || echo "N/A")
          WSS_SUMMARY=$(echo "$VALIDATION_OUTPUT" | grep "WSS Connectivity Summary:" | grep -oP "\d+/\d+" | head -1 || echo "N/A")
          TCP_SUMMARY=$(echo "$VALIDATION_OUTPUT" | grep "TCP Connectivity Summary:" | grep -oP "\d+/\d+" | head -1 || echo "N/A")

          # Extract key error messages
          ERRORS=$(echo "$VALIDATION_OUTPUT" | grep -E "^(‚úó|‚ùå)" | head -5 || echo "No specific errors found")

          # Create failure summary
          SUMMARY="**‚ùå Seed nodes validation failed!**
          üìä **Metrics:** ${TOTAL_NODES} seed nodes found
          üîó **TCP Connectivity:** ${TCP_SUMMARY} nodes reachable  
          üîê **WSS Connectivity:** ${WSS_SUMMARY} WSS-enabled nodes reachable

          **üö® Key Issues:**
          \`\`\`
          $ERRORS
          \`\`\`"

          # Prepare detailed output for spoiler (limit to ~2500 chars to stay under Discord limits)
          VALIDATION_OUTPUT_TRUNCATED=$(echo "$VALIDATION_OUTPUT" | head -c 2500)
          if [ ${#VALIDATION_OUTPUT} -gt 2500 ]; then
            VALIDATION_OUTPUT_TRUNCATED="${VALIDATION_OUTPUT_TRUNCATED}... (output truncated)"
          fi

          # Format with spoiler tags for detailed output
          DETAILED_OUTPUT="||**Full Validation Output:**
          \`\`\`
          $VALIDATION_OUTPUT_TRUNCATED
          \`\`\`||"

          FULL_DESCRIPTION="$SUMMARY

          $DETAILED_OUTPUT"

          # Create Discord embed payload using jq
          jq -n \
            --arg content "<@423176312354635779> <@419964976397156352>" \
            --arg title "‚ùå Seed Nodes Validation Failed" \
            --arg description "$FULL_DESCRIPTION" \
            --arg repo "${{ github.repository }}" \
            --arg commit_short "$COMMIT_SHORT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg repo_url "$REPO_URL" \
            --arg run_url "$RUN_URL" \
            --arg timestamp "$TIMESTAMP" \
            '{
              content: $content,
              embeds: [{
                title: $title,
                description: $description,
                color: 15158332,
                fields: [
                  {
                    name: "Repository",
                    value: "[\($repo)](\($repo_url))",
                    inline: true
                  },
                  {
                    name: "Commit",
                    value: "[\($commit_short)](\($repo_url)/commit/\($commit_sha))",
                    inline: true
                  },
                  {
                    name: "Workflow Run",
                    value: "[View Details](\($run_url))",
                    inline: true
                  }
                ],
                timestamp: $timestamp,
                footer: {
                  text: "Komodo Platform Seed Nodes Monitor"
                }
              }]
            }' | curl -H "Content-Type: application/json" \
                      -X POST \
                      -d @- \
                      "$WEBHOOK_URL"
